# vi: set sw=4 ts=4:

=head1 NAME

BusyBox - The Swiss Army Knife of Embedded Linux

=head1 SYNTAX

 busybox <applet> [arguments...]  # or

 <applet> [arguments...]	  # if symlinked

=head1 DESCRIPTION

BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured GNU cousins; however, the
options that are included provide the expected functionality and behave very
much like their GNU counterparts.

BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete POSIX environment for any small or embedded
system.

BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
'make' to compile BusyBox using your configuration.

After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by CONFIG_PREFIX.

=head1 USAGE

BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.

You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering

	/bin/busybox ls

will also cause BusyBox to behave as 'ls'.

Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.

For example, entering

	ln -s /bin/busybox ls
	./ls

will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.

If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.

=head1 COMMON OPTIONS

Most BusyBox applets support the B<--help> argument to provide a terse runtime
description of their behavior.  If the CONFIG_FEATURE_VERBOSE_USAGE option has
been enabled, more detailed usage information will also be available.

=head1 COMMANDS

Currently available applets include:

	[, [[, addgroup, adduser, ar, arping, ash, awk, basename, blkid,
	bunzip2, bzcat, cat, catv, chattr, chgrp, chmod, chown, chroot,
	chrt, chvt, cksum, clear, cmp, cp, cpio, crond, crontab, cut, date,
	dc, dd, deallocvt, delgroup, deluser, devmem, df, diff, dirname,
	dmesg, dnsd, dnsdomainname, dos2unix, du, dumpkmap, echo, egrep,
	eject, env, ether-wake, expr, false, fdflush, fdformat, fgrep, find,
	fold, free, freeramdisk, fsck, fuser, getopt, getty, grep, gunzip,
	gzip, halt, hdparm, head, hexdump, hostid, hostname, hwclock, id,
	ifconfig, ifdown, ifup, inetd, init, insmod, install, ip, ipaddr,
	ipcrm, ipcs, iplink, iproute, iprule, iptunnel, kill, killall,
	killall5, klogd, last, less, linux32, linux64, linuxrc, ln,
	loadfont, loadkmap, logger, login, logname, losetup, ls, lsattr,
	lsmod, lsof, lspci, lsusb, lzcat, lzma, makedevs, md5sum, mdev,
	mesg, microcom, mkdir, mkfifo, mknod, mkswap, mktemp, modprobe,
	more, mount, mountpoint, mt, mv, nameif, netstat, nice, nohup,
	nslookup, od, openvt, passwd, patch, pidof, ping, pipe_progress,
	pivot_root, poweroff, printenv, printf, ps, pwd, rdate, readlink,
	readprofile, realpath, reboot, renice, reset, resize, rm, rmdir,
	rmmod, route, run-parts, runlevel, sed, seq, setarch, setconsole,
	setkeycodes, setlogcons, setserial, setsid, sh, sha1sum, sha256sum,
	sha512sum, sleep, sort, start-stop-daemon, strings, stty, su,
	sulogin, swapoff, swapon, switch_root, sync, sysctl, syslogd, tail,
	tar, tee, telnet, test, tftp, time, top, touch, tr, traceroute,
	true, tty, udhcpc, umount, uname, uniq, unix2dos, unlzma, unxz,
	unzip, uptime, usleep, uudecode, uuencode, vconfig, vi, vlock,
	watch, watchdog, wc, wget, which, who, whoami, xargs, xz, xzcat,
	yes, zcat

=head1 COMMAND DESCRIPTIONS

=over 4

=item B<addgroup>

addgroup [-g GID] GROUP

Add a group 

	-g GID	Group id
	-S	Create a system group

=item B<adduser>

adduser [OPTIONS] USER

Add a user

	-h DIR		Home directory
	-g GECOS	GECOS field
	-s SHELL	Login shell
	-G GRP		Add user to existing group
	-S		Create a system user
	-D		Don't assign a password
	-H		Don't create home directory
	-u UID		User id

=item B<ar>

ar [-o] [-v] [-p] [-t] [-x] ARCHIVE FILES

Extract or list FILES from an ar archive

	-o	Preserve original dates
	-p	Extract to stdout
	-t	List
	-x	Extract
	-v	Verbose

=item B<arping>

arping [-fqbDUA] [-c CNT] [-w TIMEOUT] [-I IFACE] [-s SRC_IP] DST_IP

Send ARP requests/replies

	-f		Quit on first ARP reply
	-q		Quiet
	-b		Keep broadcasting, don't go unicast
	-D		Duplicated address detection mode
	-U		Unsolicited ARP mode, update your neighbors
	-A		ARP answer mode, update your neighbors
	-c N		Stop after sending N ARP requests
	-w TIMEOUT	Time to wait for ARP reply, seconds
	-I IFACE	Interface to use (default eth0)
	-s SRC_IP	Sender IP address
	DST_IP		Target IP address

=item B<ash>

ash [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS]]

Unix shell interpreter

=item B<awk>

awk [OPTIONS] [AWK_PROGRAM] [FILE]...

	-v VAR=VAL	Set variable
	-F SEP		Use SEP as field separator
	-f FILE		Read program from FILE

=item B<basename>

basename FILE [SUFFIX]

Strip directory path and .SUFFIX from FILE


=item B<blkid>

blkid [BLOCKDEV]...

Print UUIDs of all filesystems

=item B<bunzip2>

bunzip2 [-cf] [FILE]...

Decompress FILEs (or stdin)

	-c	Write to stdout
	-f	Force

=item B<bzcat>

bzcat FILE

Decompress to stdout

=item B<cat>

cat [FILE]...

Concatenate FILEs and print them to stdout

=item B<catv>

catv [-etv] [FILE]...

Display nonprinting characters as ^x or M-x

	-e	End each line with $
	-t	Show tabs as ^I
	-v	Don't use ^x or M-x escapes

=item B<chattr>

chattr [-R] [-+=AacDdijsStTu] [-v VERSION] [FILE]...

Change file attributes on an ext2 fs

Modifiers:

	-	Remove attributes
	+	Add attributes
	=	Set attributes
Attributes:

	A	Don't track atime
	a	Append mode only
	c	Enable compress
	D	Write dir contents synchronously
	d	Don't backup with dump
	i	Cannot be modified (immutable)
	j	Write all data to journal first
	s	Zero disk storage when deleted
	S	Write file contents synchronously
	t	Disable tail-merging of partial blocks with other files
	u	Allow file to be undeleted
	-R	Recurse
	-v	Set the file's version/generation number

=item B<chgrp>

chgrp [-RhLHPcvf]... GROUP FILE...

Change the group membership of each FILE to GROUP

	-R	Recurse
	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)
	-c	List changed files
	-v	Verbose
	-f	Hide errors

=item B<chmod>

chmod [-Rcvf] MODE[,MODE]... FILE...

Each MODE is one or more of the letters ugoa, one of the
symbols +-= and one or more of the letters rwxst

	-R	Recurse
	-c	List changed files
	-v	List all files
	-f	Hide errors

=item B<chown>

chown [-RhLHPcvf]... OWNER[<.|:>[GROUP]] FILE...

Change the owner and/or group of each FILE to OWNER and/or GROUP

	-R	Recurse
	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)
	-c	List changed files
	-v	List all files
	-f	Hide errors

=item B<chroot>

chroot NEWROOT [PROG ARGS]

Run PROG with root directory set to NEWROOT

=item B<chrt>

chrt [-prfom] [PRIO] [PID | PROG ARGS]

Change scheduling priority and class for a process

	-p	Operate on PID
	-r	Set SCHED_RR class
	-f	Set SCHED_FIFO class
	-o	Set SCHED_OTHER class
	-m	Show min/max priorities

=item B<chvt>

chvt N

Change the foreground virtual terminal to /dev/ttyN

=item B<cksum>

cksum FILES...

Calculate the CRC32 checksums of FILES

=item B<clear>

clear 

Clear screen

=item B<cmp>

cmp [-l] [-s] FILE1 [FILE2 [SKIP1 [SKIP2]]]

Compare FILE1 with FILE2 (or stdin)

	-l	Write the byte numbers (decimal) and values (octal)
		for all differing bytes
	-s	Quiet

=item B<cp>

cp [OPTIONS] SOURCE... DEST

Copy SOURCE(s) to DEST

	-a	Same as -dpR
	-R,-r	Recurse
	-d,-P	Preserve symlinks (default if -R)
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-p	Preserve file attributes if possible
	-f	Overwrite
	-i	Prompt before overwrite
	-l,-s	Create (sym)links

=item B<cpio>

cpio [-dmvu] [-F FILE] [-ti] [EXTR_FILE]...

Extract or list files from a cpio archive

Main operation mode:

	-t	List
	-i	Extract EXTR_FILEs (or all)
	-d	Make leading directories
	-m	Preserve mtime
	-v	Verbose
	-u	Overwrite
	-F FILE	Input (-t,-i,-p) or output (-o) file

=item B<crond>

crond -fbS -l N -L LOGFILE -c DIR

	-f	Foreground
	-b	Background (default)
	-S	Log to syslog (default)
	-l	Set log level. 0 is the most verbose, default 8
	-L	Log to file
	-c	Working dir

=item B<crontab>

crontab [-c DIR] [-u USER] [-ler]|[FILE]

	-c	Crontab directory
	-u	User
	-l	List crontab
	-e	Edit crontab
	-r	Delete crontab
	FILE	Replace crontab by FILE ('-': stdin)

=item B<cut>

cut [OPTIONS] [FILE]...

Print selected fields from each input FILE to stdout

	-b LIST	Output only bytes from LIST
	-c LIST	Output only characters from LIST
	-d CHAR	Use CHAR instead of tab as the field delimiter
	-s	Output only the lines containing delimiter
	-f N	Print only these fields
	-n	Ignored

=item B<date>

date [OPTIONS] [+FMT] [TIME]

Display time (using +FMT), or set time

	[-s,--set] TIME	Set time to TIME
	-u,--utc	Work in UTC (don't convert to local time)
	-R,--rfc-2822	Output RFC-2822 compliant date string
	-I[SPEC]	Output ISO-8601 compliant date string
			SPEC='date' (default) for date only,
			'hours', 'minutes', or 'seconds' for date and
			time to the indicated precision
	-r,--reference FILE	Display last modification time of FILE
	-d,--date TIME	Display TIME, not 'now'
	-D FMT		Use FMT for -d TIME conversion

Recognized TIME formats:

	hh:mm[:ss]
	[YYYY.]MM.DD-hh:mm[:ss]
	YYYY-MM-DD hh:mm[:ss]
	[[[[[YY]YY]MM]DD]hh]mm[.ss]
	'date TIME' form accepts MMDDhhmm[[YY]YY][.ss] instead

=item B<dc>

dc EXPRESSION...

Tiny RPN calculator. Operations:
+, add, -, sub, *, mul, /, div, %, mod, and, or, not, eor,
p - print top of the stack (without popping),
f - print entire stack,
o - pop the value and set output radix (must be 10, 16, 8 or 2).
Examples: 'dc 2 2 add p' -> 4, 'dc 8 8 * 2 2 + / p' -> 16

=item B<dd>

dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
	[seek=N] [conv=notrunc|noerror|sync|fsync]

Copy a file with converting and formatting

	if=FILE		Read from FILE instead of stdin
	of=FILE		Write to FILE instead of stdout
	bs=N		Read and write N bytes at a time
	ibs=N		Read N bytes at a time
	obs=N		Write N bytes at a time
	count=N		Copy only N input blocks
	skip=N		Skip N input blocks
	seek=N		Skip N output blocks
	conv=notrunc	Don't truncate output file
	conv=noerror	Continue after read errors
	conv=sync	Pad blocks with zeros
	conv=fsync	Physically write data out before finishing

Numbers may be suffixed by c (x1), w (x2), b (x512), kD (x1000), k (x1024),
MD (x1000000), M (x1048576), GD (x1000000000) or G (x1073741824)

=item B<deallocvt>

deallocvt [N]

Deallocate unused virtual terminal /dev/ttyN

=item B<delgroup>

delgroup GROUP

Delete group GROUP from the system

=item B<deluser>

deluser USER

Delete USER from the system

=item B<devmem>

devmem ADDRESS [WIDTH [VALUE]]

Read/write from physical address

	ADDRESS	Address to act upon
	WIDTH	Width (8/16/...)
	VALUE	Data to be written

=item B<df>

df [-Pkmh] [FILESYSTEM]...

Print filesystem usage statistics

	-P	POSIX output format
	-k	1024-byte blocks (default)
	-m	1M-byte blocks
	-h	Human readable (e.g. 1K 243M 2G)

=item B<diff>

diff [-abBdiNqrTstw] [-L LABEL] [-S FILE] [-U LINES] FILE1 FILE2

Compare files line by line and output the differences between them.
This implementation supports unified diffs only.

	-a	Treat all files as text
	-b	Ignore changes in the amount of whitespace
	-B	Ignore changes whose lines are all blank
	-d	Try hard to find a smaller set of changes
	-i	Ignore case differences
	-L	Use LABEL instead of the filename in the unified header
	-N	Treat absent files as empty
	-q	Output only whether files differ
	-r	Recurse
	-S	Start with FILE when comparing directories
	-T	Make tabs line up by prefixing a tab when necessary
	-s	Report when two files are the same
	-t	Expand tabs to spaces in output
	-U	Output LINES lines of context
	-w	Ignore all whitespace

=item B<dirname>

dirname FILENAME

Strip non-directory suffix from FILENAME

=item B<dmesg>

dmesg [-c] [-n LEVEL] [-s SIZE]

Print or control the kernel ring buffer

	-c		Clear ring buffer after printing
	-n LEVEL	Set console logging level
	-s SIZE		Buffer size

=item B<dnsd>

dnsd [-dvs] [-c CONFFILE] [-t TTL_SEC] [-p PORT] [-i ADDR]

Small static DNS server daemon

	-c FILE	Config file
	-t SEC	TTL
	-p PORT	Listen on PORT
	-i ADDR	Listen on ADDR
	-d	Daemonize
	-v	Verbose
	-s	Send successful replies only. Use this if you want
		to use /etc/resolv.conf with two nameserver lines:
			nameserver DNSD_SERVER
			nameserver NORMAL_DNS_SERVER

=item B<dos2unix>

dos2unix [-ud] [FILE]

Convert FILE in-place from DOS to Unix format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<du>

du [-aHLdclsxhmk] [FILE]...

Summarize disk space used for each FILE and/or directory

	-a	Show file sizes too
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-d N	Limit output to directories (and files with -a) of depth < N
	-c	Show grand total
	-l	Count sizes many times if hard linked
	-s	Display only a total for each argument
	-x	Skip directories on different filesystems
	-h	Sizes in human readable format (e.g., 1K 243M 2G)
	-m	Sizes in megabytes
	-k	Sizes in kilobytes (default)

=item B<dumpkmap>

dumpkmap > keymap

Print a binary keyboard translation table to stdout

=item B<echo>

echo [-neE] [ARG]...

Print the specified ARGs to stdout

	-n	Suppress trailing newline
	-e	Interpret backslash escapes (i.e., \t=tab)
	-E	Don't interpret backslash escapes (default)

=item B<eject>

eject [-t] [-T] [DEVICE]

Eject DEVICE or default /dev/cdrom

	-t	Close tray
	-T	Open/close tray (toggle)

=item B<env>

env [-iu] [-] [name=value]... [PROG ARGS]

Print the current environment or run PROG after setting up
the specified environment

	-, -i	Start with an empty environment
	-u	Remove variable from the environment

=item B<ether-wake>

ether-wake [-b] [-i iface] [-p aa:bb:cc:dd[:ee:ff]] MAC

Send a magic packet to wake up sleeping machines.
MAC must be a station address (00:11:22:33:44:55) or
a hostname with a known 'ethers' entry.

	-b		Send wake-up packet to the broadcast address
	-i iface	Interface to use (default eth0)
	-p pass		Append four or six byte password PW to the packet

=item B<expr>

expr EXPRESSION

Print the value of EXPRESSION to stdout

EXPRESSION may be:

	ARG1 | ARG2	ARG1 if it is neither null nor 0, otherwise ARG2
	ARG1 & ARG2	ARG1 if neither argument is null or 0, otherwise 0
	ARG1 < ARG2	1 if ARG1 is less than ARG2, else 0. Similarly:
	ARG1 <= ARG2
	ARG1 = ARG2
	ARG1 != ARG2
	ARG1 >= ARG2
	ARG1 > ARG2
	ARG1 + ARG2	Sum of ARG1 and ARG2. Similarly:
	ARG1 - ARG2
	ARG1 * ARG2
	ARG1 / ARG2
	ARG1 % ARG2
	STRING : REGEXP		Anchored pattern match of REGEXP in STRING
	match STRING REGEXP	Same as STRING : REGEXP
	substr STRING POS LENGTH Substring of STRING, POS counted from 1
	index STRING CHARS	Index in STRING where any CHARS is found, or 0
	length STRING		Length of STRING
	quote TOKEN		Interpret TOKEN as a string, even if
				it is a keyword like 'match' or an
				operator like '/'
	(EXPRESSION)		Value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\( and \) or null; if \( and \) are not used, they return the number
of characters matched or 0.

=item B<false>

false 

Return an exit code of FALSE (1)

=item B<fdflush>

fdflush DEVICE

Force floppy disk drive to detect disk change

=item B<fdformat>

fdformat [-n] DEVICE

Format floppy disk

	-n	Don't verify after format

=item B<find>

find [PATH]... [OPTIONS] [ACTIONS]

Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: PATH is current directory, action is '-print'

	-follow		Follow symlinks
	-xdev		Don't descend directories on other filesystems
	-maxdepth N	Descend at most N levels. -maxdepth 0 applies
			actions to command line arguments only
	-mindepth N	Don't act on first N levels
	-depth		Act on directory *after* traversing it

Actions:

	( ACTIONS )	Group actions for -o / -a
	! ACT		Invert ACT's success/failure
	ACT1 [-a] ACT2	If ACT1 fails, stop, else do ACT2
	ACT1 -o ACT2	If ACT1 succeeds, stop, else do ACT2
			Note: -a has higher priority than -o
	-name PATTERN	Match file name (w/o directory name) to PATTERN
	-iname PATTERN	Case insensitive -name
	-path PATTERN	Match path to PATTERN
	-ipath PATTERN	Case insensitive -path
	-regex PATTERN	Match path to regex PATTERN
	-type X		File type is X (one of: f,d,l,b,c,...)
	-perm MASK	At least one mask bit (+MASK), all bits (-MASK),
			or exactly MASK bits are set in file's mode
	-mtime DAYS	mtime is greater than (+N), less than (-N),
			or exactly N days in the past
	-mmin MINS	mtime is greater than (+N), less than (-N),
			or exactly N minutes in the past
	-newer FILE	mtime is more recent than FILE's
	-user NAME/ID	File is owned by given user
	-group NAME/ID	File is owned by given group
	-size N[bck]	File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
			+/-N: file size is bigger/smaller than N
	-prune		If current file is directory, don't descend into it
If none of the following actions is specified, -print is assumed
	-print		Print file name
	-print0		Print file name, NUL terminated
	-exec CMD ARG ;	Run CMD with all instances of {} replaced by
			file name. Fails if CMD exits with nonzero

=item B<fold>

fold [-bs] [-w WIDTH] [FILE]...

Wrap input lines in each FILE (or stdin), writing to stdout

	-b	Count bytes rather than columns
	-s	Break at spaces
	-w	Use WIDTH columns instead of 80

=item B<free>

free [-b/k/m/g]

Display the amount of free and used system memory

=item B<freeramdisk>

freeramdisk DEVICE

Free all memory used by the specified ramdisk

=item B<fsck>

fsck [-ANPRTV] [-C FD] [-t FSTYPE] [FS_OPTS] [BLOCKDEV]...

Check and repair filesystems

	-A	Walk /etc/fstab and check all filesystems
	-N	Don't execute, just show what would be done
	-P	With -A, check filesystems in parallel
	-R	With -A, skip the root filesystem
	-T	Don't show title on startup
	-V	Verbose
	-C n	Write status information to specified filedescriptor
	-t TYPE	List of filesystem types to check

=item B<fuser>

fuser [OPTIONS] FILE or PORT/PROTO

Find processes which use FILEs or PORTs

	-m	Find processes which use same fs as FILEs
	-4,-6	Search only IPv4/IPv6 space
	-s	Don't display PIDs
	-k	Kill found processes
	-SIGNAL	Signal to send (default: KILL)

=item B<getopt>

getopt [OPTIONS] [--] OPTSTRING PARAMS

	-a,--alternative		Allow long options starting with single -
	-l,--longoptions=LOPT[,...]	Long options to be recognized
	-n,--name=PROGNAME		The name under which errors are reported
	-o,--options=OPTSTRING		Short options to be recognized
	-q,--quiet			Disable error reporting by getopt(3)
	-Q,--quiet-output		No normal output
	-s,--shell=SHELL		Set shell quoting conventions
	-T,--test			Test for getopt(1) version
	-u,--unquoted			Don't quote the output

Example:


O=`getopt -l bb: -- ab:c:: "$@"` || exit 1
eval set -- "$O"
while true; do
	case "$1" in
	-a)	echo A; shift;;
	-b|--bb) echo "B:'$2'"; shift 2;;
	-c)	case "$2" in
		"")	echo C; shift 2;;
		*)	echo "C:'$2'"; shift 2;;
		esac;;
	--)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done

=item B<getty>

getty [OPTIONS] BAUD_RATE[,BAUD_RATE]... TTY [TERMTYPE]

Open TTY, prompt for login name, then invoke /bin/login

	-h		Enable hardware RTS/CTS flow control
	-L		Set CLOCAL (ignore Carrier Detect state)
	-m		Get baud rate from modem's CONNECT status message
	-n		Don't prompt for login name
	-w		Wait for CR or LF before sending /etc/issue
	-i		Don't display /etc/issue
	-f ISSUE_FILE	Display ISSUE_FILE instead of /etc/issue
	-l LOGIN	Invoke LOGIN instead of /bin/login
	-t SEC		Terminate after SEC if no login name is read
	-I INITSTR	Send INITSTR before anything else
	-H HOST		Log HOST into the utmp file as the hostname

BAUD_RATE of 0 leaves it unchanged

=item B<grep>

grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...

Search for PATTERN in FILEs (or stdin)

	-H	Add 'filename:' prefix
	-h	Do not add 'filename:' prefix
	-n	Add 'line_no:' prefix
	-l	Show only names of files that match
	-L	Show only names of files that don't match
	-c	Show only count of matching lines
	-o	Show only the matching part of line
	-q	Quiet. Return 0 if PATTERN is found, 1 otherwise
	-v	Select non-matching lines
	-s	Suppress open and read errors
	-r	Recurse
	-i	Ignore case
	-w	Match whole words only
	-x	Match whole lines only
	-F	PATTERN is a literal (not regexp)
	-E	PATTERN is an extended regexp
	-m N	Match up to N times per file
	-A N	Print N lines of trailing context
	-B N	Print N lines of leading context
	-C N	Same as '-A N -B N'
	-e PTRN	Pattern to match
	-f FILE	Read pattern from file

=item B<gunzip>

gunzip [-cft] [FILE]...

Decompress FILEs (or stdin)

	-c	Write to stdout
	-f	Force
	-t	Test file integrity

=item B<gzip>

gzip [-cfd] [FILE]...

Compress FILEs (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force

=item B<halt>

halt [-d DELAY] [-n] [-f] [-w]

Halt the system

	-d SEC	Delay interval
	-n	Do not sync
	-f	Force (don't go through init)
	-w	Only write a wtmp record

=item B<hdparm>

hdparm [OPTIONS] [DEVICE]

	-a	Get/set fs readahead
	-A	Set drive read-lookahead flag (0/1)
	-b	Get/set bus state (0 == off, 1 == on, 2 == tristate)
	-B	Set Advanced Power Management setting (1-255)
	-c	Get/set IDE 32-bit IO setting
	-C	Check IDE power mode status
	-D	Enable/disable drive defect-mgmt
	-f	Flush buffer cache for device on exit
	-g	Display drive geometry
	-h	Display terse usage information
	-i	Display drive identification
	-I	Detailed/current information directly from drive
	-k	Get/set keep_settings_over_reset flag (0/1)
	-K	Set drive keep_features_over_reset flag (0/1)
	-L	Set drive doorlock (0/1) (removable harddisks only)
	-m	Get/set multiple sector count
	-n	Get/set ignore-write-errors flag (0/1)
	-p	Set PIO mode on IDE interface chipset (0,1,2,3,4,...)
	-P	Set drive prefetch count
	-Q	Get/set DMA tagged-queuing depth (if supported)
	-r	Get/set readonly flag (DANGEROUS to set)
	-S	Set standby (spindown) timeout
	-t	Perform device read timings
	-T	Perform cache read timings
	-u	Get/set unmaskirq flag (0/1)
	-v	Defaults; same as -mcudkrag for IDE drives
	-V	Display program version and exit immediately
	-W	Set drive write-caching flag (0/1) (DANGEROUS)
	-X	Set IDE xfer mode (DANGEROUS)
	-y	Put IDE drive in standby mode
	-Y	Put IDE drive to sleep
	-Z	Disable Seagate auto-powersaving mode
	-z	Reread partition table

=item B<head>

head [OPTIONS] [FILE]...

Print first 10 lines of each FILE (or stdin) to stdout.
With more than one FILE, precede each with a filename header.

	-n N[kbm]	Print first N lines
	-c N[kbm]	Print first N bytes
	-q		Never print headers
	-v		Always print headers

N may be suffixed by k (x1024), b (x512), or m (x1024^2).

=item B<hexdump>

hexdump [-bcCdefnosvx] [FILE]...

Display FILEs (or stdin) in a user specified format

	-b		One-byte octal display
	-c		One-byte character display
	-C		Canonical hex+ASCII, 16 bytes per line
	-d		Two-byte decimal display
	-e FORMAT_STRING
	-f FORMAT_FILE
	-n LENGTH	Interpret only LENGTH bytes of input
	-o		Two-byte octal display
	-s OFFSET	Skip OFFSET bytes
	-v		Display all input data
	-x		Two-byte hexadecimal display

=item B<hostid>

hostid 

Print out a unique 32-bit identifier for the machine

=item B<hostname>

hostname [OPTIONS] [HOSTNAME | -F FILE]

Get or set hostname or DNS domain name

	-s	Short
	-i	Addresses for the hostname
	-d	DNS domain name
	-f	Fully qualified domain name
	-F FILE	Use FILE's content as hostname

=item B<hwclock>

hwclock [-r|--show] [-s|--hctosys] [-w|--systohc] [-t|--systz] [-l|--localtime] [-u|--utc] [-f|--rtc FILE]

Query and set hardware clock (RTC)

	-r	Show hardware clock time
	-s	Set system time from hardware clock
	-w	Set hardware clock from system time
	-t	Set in-kernel timezone, correct system time
		if hardware clock is in local time
	-u	Assume hardware clock is kept in UTC
	-l	Assume hardware clock is kept in local time
	-f FILE	Use specified device (e.g. /dev/rtc2)

=item B<id>

id [OPTIONS] [USER]

Print information about USER or the current user

	-u	User ID
	-g	Group ID
	-G	Supplementary group IDs
	-n	Print names instead of numbers
	-r	Print real ID instead of effective ID

=item B<ifconfig>

ifconfig [-a] interface [address]

Configure a network interface

	[add ADDRESS[/PREFIXLEN]]
	[del ADDRESS[/PREFIXLEN]]
	[[-]broadcast [ADDRESS]] [[-]pointopoint [ADDRESS]]
	[netmask ADDRESS] [dstaddr ADDRESS]
	[outfill NN] [keepalive NN]
	[hw ether|infiniband ADDRESS] [metric NN] [mtu NN]
	[[-]trailers] [[-]arp] [[-]allmulti]
	[multicast] [[-]promisc] [txqueuelen NN] [[-]dynamic]
	[mem_start NN] [io_addr NN] [irq NN]
	[up|down] ...

=item B<ifdown>

ifdown [-anmvf] [-i FILE] IFACE...

	-a	De/configure all interfaces automatically
	-i FILE	Use FILE for interface definitions
	-n	Print out what would happen, but don't do it
		(note: doesn't disable mappings)
	-m	Don't run any mappings
	-v	Print out what would happen before doing it
	-f	Force de/configuration

=item B<ifup>

ifup [-anmvf] [-i FILE] IFACE...

	-a	De/configure all interfaces automatically
	-i FILE	Use FILE for interface definitions
	-n	Print out what would happen, but don't do it
		(note: doesn't disable mappings)
	-m	Don't run any mappings
	-v	Print out what would happen before doing it
	-f	Force de/configuration

=item B<inetd>

inetd [-fe] [-q N] [-R N] [CONFFILE]

Listen for network connections and launch programs

	-f	Run in foreground
	-e	Log to stderr
	-q N	Socket listen queue (default: 128)
	-R N	Pause services after N connects/min
		(default: 0 - disabled)

=item B<init>

init 

Init is the parent of all processes

=item B<insmod>

insmod FILE [SYMBOL=VALUE]...

Load the specified kernel modules into the kernel

=item B<install>

install [-cdDsp] [-o USER] [-g GRP] [-m MODE] [SOURCE]... DEST

Copy files and set attributes

	-c	Just copy (default)
	-d	Create directories
	-D	Create leading target directories
	-s	Strip symbol table
	-p	Preserve date
	-o USER	Set ownership
	-g GRP	Set group ownership
	-m MODE	Set permissions

=item B<ip>

ip [OPTIONS] {address | route | link | tunnel | rule} {COMMAND}

ip [OPTIONS] OBJECT {COMMAND}
where OBJECT := {address | route | link | tunnel | rule}
OPTIONS := { -f[amily] { inet | inet6 | link } | -o[neline] }

=item B<ipaddr>

ipaddr { {add|del} IFADDR dev STRING | {show|flush}
		[dev STRING] [to PREFIX] }

ipaddr {add|delete} IFADDR dev STRING
ipaddr {show|flush} [dev STRING] [scope SCOPE-ID]
	[to PREFIX] [label PATTERN]
	IFADDR := PREFIX | ADDR peer PREFIX
	[broadcast ADDR] [anycast ADDR]
	[label STRING] [scope SCOPE-ID]
	SCOPE-ID := [host | link | global | NUMBER]

=item B<ipcrm>

ipcrm [-MQS key] [-mqs id]

Upper-case options MQS remove an object by shmkey value.
Lower-case options remove an object by shmid value.

	-mM	Remove memory segment after last detach
	-qQ	Remove message queue
	-sS	Remove semaphore

=item B<ipcs>

ipcs [[-smq] -i shmid] | [[-asmq] [-tcplu]]

	-i	Show specific resource
Resource specification:

	-m	Shared memory segments
	-q	Message queues
	-s	Semaphore arrays
	-a	All (default)
Output format:

	-t	Time
	-c	Creator
	-p	Pid
	-l	Limits
	-u	Summary

=item B<iplink>

iplink { set DEVICE { up | down | arp { on | off } | show [DEVICE] }

iplink set DEVICE { up | down | arp | multicast { on | off } |
			dynamic { on | off } |
			mtu MTU }
iplink show [DEVICE]

=item B<iproute>

iproute { list | flush | add | del | change | append |
		replace | test } ROUTE

iproute { list | flush } SELECTOR
iproute get ADDRESS [from ADDRESS iif STRING]
	[oif STRING] [tos TOS]
iproute { add | del | change | append | replace | test } ROUTE
	SELECTOR := [root PREFIX] [match PREFIX] [proto RTPROTO]
	ROUTE := [TYPE] PREFIX [tos TOS] [proto RTPROTO] [metric METRIC]

=item B<iprule>

iprule {[list | add | del] RULE}

iprule [list | add | del] SELECTOR ACTION
	SELECTOR := [from PREFIX] [to PREFIX] [tos TOS] [fwmark FWMARK]
			[dev STRING] [pref NUMBER]
	ACTION := [table TABLE_ID] [nat ADDRESS]
			[prohibit | reject | unreachable]
			[realms [SRCREALM/]DSTREALM]
	TABLE_ID := [local | main | default | NUMBER]

=item B<iptunnel>

iptunnel { add | change | del | show } [NAME]
	[mode { ipip | gre | sit }]
	[remote ADDR] [local ADDR] [ttl TTL]

iptunnel { add | change | del | show } [NAME]
	[mode { ipip | gre | sit }] [remote ADDR] [local ADDR]
	[[i|o]seq] [[i|o]key KEY] [[i|o]csum]
	[ttl TTL] [tos TOS] [[no]pmtudisc] [dev PHYS_DEV]

=item B<kill>

kill [-l] [-SIG] PID...

Send a signal (default: TERM) to given PIDs

	-l	List all signal names and numbers

=item B<killall>

killall [-l] [-q] [-SIG] PROCESS_NAME...

Send a signal (default: TERM) to given processes

	-l	List all signal names and numbers
	-q	Don't complain if no processes were killed

=item B<killall5>

killall5 [-l] [-SIG] [-o PID]...

Send a signal (default: TERM) to all processes outside current session

	-l	List all signal names and numbers
	-o PID	Don't signal this PID

=item B<klogd>

klogd [-c N] [-n]

Kernel logger

	-c N	Print to console messages more urgent than prio N (1-8)
	-n	Run in foreground

=item B<last>

last 

Show listing of the last users that logged into the system

=item B<less>

less [-EMmNh~I?] [FILE]...

View FILE (or stdin) one screenful at a time

	-E	Quit once the end of a file is reached
	-M,-m	Display status line with line numbers
		and percentage through the file
	-N	Prefix line number to each line
	-I	Ignore case in all searches
	-~	Suppress ~s displayed past EOF

=item B<ln>

ln [OPTIONS] TARGET... LINK|DIR

Create a link LINK or DIR/TARGET to the specified TARGET(s)

	-s	Make symlinks instead of hardlinks
	-f	Remove existing destinations
	-n	Don't dereference symlinks - treat like normal file
	-b	Make a backup of the target (if exists) before link operation
	-S suf	Use suffix instead of ~ when making backup files

=item B<loadfont>

loadfont < font

Load a console font from stdin

=item B<loadkmap>

loadkmap < keymap

Load a binary keyboard translation table from stdin


=item B<logger>

logger [OPTIONS] [MESSAGE]

Write MESSAGE (or stdin) to syslog

	-s	Log to stderr as well as the system log
	-t TAG	Log using the specified tag (defaults to user name)
	-p PRIO	Priority (numeric or facility.level pair)

=item B<login>

login [-p] [-h HOST] [[-f] USER]

Begin a new session on the system

	-f	Don't authenticate (user already authenticated)
	-h	Name of the remote host
	-p	Preserve environment

=item B<logname>

logname 

Print the name of the current user

=item B<losetup>

losetup [-r] [-o OFS] LOOPDEV FILE - associate loop devices
	losetup -d LOOPDEV - disassociate
	losetup [-f] - show

	-o OFS	Start OFS bytes into FILE
	-r	Read-only
	-f	Show first free loop device

=item B<ls>

ls [-1AaCxdLHRFplinsehrSXvctu] [-w WIDTH] [FILE]...

List directory contents

	-1	One column output
	-a	Include entries which start with .
	-A	Like -a, but exclude . and ..
	-C	List by columns
	-x	List by lines
	-d	List directory entries instead of contents
	-L	Follow symlinks
	-H	Follow symlinks on command line
	-R	Recurse
	-p	Append / to dir entries
	-F	Append indicator (one of */=@|) to entries
	-l	Long listing format
	-i	List inode numbers
	-n	List numeric UIDs and GIDs instead of names
	-s	List allocated blocks
	-e	List full date and time
	-h	List sizes in human readable format (1K 243M 2G)
	-r	Sort in reverse order
	-S	Sort by size
	-X	Sort by extension
	-v	Sort by version
	-c	With -l: sort by ctime
	-t	With -l: sort by mtime
	-u	With -l: sort by atime
	-w N	Assume the terminal is N columns wide
	--color[={always,never,auto}]	Control coloring

=item B<lsattr>

lsattr [-Radlv] [FILE]...

List file attributes on an ext2 fs

	-R	Recurse
	-a	Don't hide entries starting with .
	-d	List directory entries instead of contents
	-l	List long flag names
	-v	List the file's version/generation number

=item B<lsmod>

lsmod 

List the currently loaded kernel modules

=item B<lsof>

lsof 

Show all open files

=item B<lspci>

lspci [-mk]

List all PCI devices

	-m	Parsable output
	-k	Show driver

=item B<lzcat>

lzcat FILE

Decompress to stdout

=item B<lzma>

lzma -d [-cf] [FILE]...

Decompress FILE (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force

=item B<makedevs>

makedevs [-d device_table] rootdir

Create a range of special files as specified in a device table.
Device table entries take the form of:

<name> <type> <mode> <uid> <gid> <major> <minor> <start> <inc> <count>
Where name is the file name, type can be one of:
	f	Regular file
	d	Directory
	c	Character device
	b	Block device
	p	Fifo (named pipe)
uid is the user id for the target file, gid is the group id for the
target file. The rest of the entries (major, minor, etc) apply to
to device special files. A '-' may be used for blank entries.

=item B<md5sum>

md5sum [-c[sw]] [FILE]...

Print or check MD5 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<mdev>

mdev [-s]

mdev -s is to be run during boot to scan /sys and populate /dev.

Bare mdev is a kernel hotplug helper. To activate it:
	echo /sbin/mdev >/proc/sys/kernel/hotplug

It uses /etc/mdev.conf with lines
	[-]DEVNAME UID:GID PERM [>|=PATH]|[!] [@|$|*PROG]
where DEVNAME is device name regex, @major,minor[-minor2], or
environment variable regex. A common use of the latter is
to load modules for hotplugged devices:

	$MODALIAS=.* 0:0 660 @modprobe "$MODALIAS"

If /dev/mdev.seq file exists, mdev will wait for its value
to match $SEQNUM variable. This prevents plug/unplug races.
To activate this feature, create empty /dev/mdev.seq at boot.

=item B<mesg>

mesg [y|n]

Control write access to your terminal
	y	Allow write access to your terminal
	n	Disallow write access to your terminal

=item B<microcom>

microcom [-d DELAY] [-t TIMEOUT] [-s SPEED] [-X] TTY

Copy bytes for stdin to TTY and from TTY to stdout

	-d	Wait up to DELAY ms for TTY output before sending every
		next byte to it
	-t	Exit if both stdin and TTY are silent for TIMEOUT ms
	-s	Set serial line to SPEED
	-X	Disable special meaning of NUL and Ctrl-X from stdin

=item B<mkdir>

mkdir [OPTIONS] DIRECTORY...

Create DIRECTORY

	-m MODE	Mode
	-p	No error if exists; make parent directories as needed

=item B<mkfifo>

mkfifo [-m MODE] NAME

Create named pipe

	-m MODE	Mode (default a=rw)

=item B<mknod>

mknod [-m MODE] NAME TYPE MAJOR MINOR

Create a special file (block, character, or pipe)

	-m MODE	Creation mode (default a=rw)
TYPE:
	b	Block device
	c or u	Character device
	p	Named pipe (MAJOR and MINOR are ignored)

=item B<mkswap>

mkswap [-L LBL] BLOCKDEV [KBYTES]

Prepare BLOCKDEV to be used as swap partition

	-L LBL	Label

=item B<mktemp>

mktemp [-dt] [-p DIR] [TEMPLATE]

Create a temporary file with name based on TEMPLATE and print its name.
TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
Without TEMPLATE, -t tmp.XXXXXX is assumed.

	-d	Make directory, not file
	-t	Prepend base directory name to TEMPLATE
	-p DIR	Use DIR as a base directory (implies -t)
	-u	Do not create anything; print a name

Base directory is: -p DIR, else $TMPDIR, else /tmp

=item B<modprobe>

modprobe [-alrqvsD] MODULE [symbol=value]...

	-a	Load multiple MODULEs
	-l	List (MODULE is a pattern)
	-r	Remove MODULE (stacks) or do autoclean
	-q	Quiet
	-v	Verbose
	-s	Log to syslog
	-D	Show dependencies

=item B<more>

more [FILE]...

View FILE (or stdin) one screenful at a time

=item B<mount>

mount [OPTIONS] [-o OPTS] DEVICE NODE

Mount a filesystem. Filesystem autodetection requires /proc.

	-a		Mount all filesystems in fstab
	-r		Read-only mount
	-w		Read-write mount (default)
	-t FSTYPE[,...]	Filesystem type(s)
	-O OPT		Mount only filesystems with option OPT (-a only)
-o OPT:
	loop		Ignored (loop devices are autodetected)
	[a]sync		Writes are [a]synchronous
	[no]atime	Disable/enable updates to inode access times
	[no]diratime	Disable/enable atime updates to directories
	[no]relatime	Disable/enable atime updates relative to modification time
	[no]dev		(Dis)allow use of special device files
	[no]exec	(Dis)allow use of executable files
	[no]suid	(Dis)allow set-user-id-root programs
	[r]shared	Convert [recursively] to a shared subtree
	[r]slave	Convert [recursively] to a slave subtree
	[r]private	Convert [recursively] to a private subtree
	[un]bindable	Make mount point [un]able to be bind mounted
	[r]bind		Bind a file or directory [recursively] to another location
	move		Relocate an existing mount point
	remount		Remount a mounted filesystem, changing flags
	ro/rw		Same as -r/-w

There are filesystem-specific -o flags.

=item B<mountpoint>

mountpoint [-q] <[-dn] DIR | -x DEVICE>

Check if the directory is a mountpoint

	-q	Quiet
	-d	Print major/minor device number of the filesystem
	-n	Print device name of the filesystem
	-x	Print major/minor device number of the blockdevice

=item B<mt>

mt [-f device] opcode value

Control magnetic tape drive operation

Available Opcodes:


bsf bsfm bsr bss datacompression drvbuffer eof eom erase
fsf fsfm fsr fss load lock mkpart nop offline ras1 ras2
ras3 reset retension rewind rewoffline seek setblk setdensity
setpart tell unload unlock weof wset

=item B<mv>

mv [-fin] SOURCE DEST
or: mv [-fin] SOURCE... DIRECTORY

Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY

	-f	Don't prompt before overwriting
	-i	Interactive, prompt before overwrite
	-n	Don't overwrite an existing file

=item B<nameif>

nameif [-s] [-c FILE] [IFNAME HWADDR]...

Rename network interface while it in the down state.
The device with address HWADDR is renamed to IFACE.

	-c FILE	Configuration file (default: /etc/mactab)
	-s	Log to syslog

=item B<netstat>

netstat [-ral] [-tuwx] [-en]

Display networking information

	-r	Routing table
	-a	All sockets
	-l	Listening sockets
		Else: connected sockets
	-t	TCP sockets
	-u	UDP sockets
	-w	Raw sockets
	-x	Unix sockets
		Else: all socket types
	-e	Other/more information
	-n	Don't resolve names

=item B<nice>

nice [-n ADJUST] [PROG ARGS]

Change scheduling priority, run PROG

	-n ADJUST	Adjust priority by ADJUST

=item B<nohup>

nohup PROG ARGS

Run PROG immune to hangups, with output to a non-tty

=item B<nslookup>

nslookup [HOST] [SERVER]

Query the nameserver for the IP address of the given HOST
optionally using a specified DNS server

=item B<od>

od [-abcdfhilovxs] [-t TYPE] [-A RADIX] [-N SIZE] [-j SKIP] [-S MINSTR] [-w WIDTH] [FILE...]

Print FILEs (or stdin) unambiguously, as octal bytes by default

=item B<openvt>

openvt [-c N] [-sw] [PROG ARGS]

Start PROG on a new virtual terminal

	-c N	Use specified VT
	-s	Switch to the VT
	-w	Wait for PROG to exit

=item B<passwd>

passwd [OPTIONS] [USER]

Change USER's password (default: current user)

	-a ALG	Encryption method
	-d	Set password to ''
	-l	Lock (disable) account
	-u	Unlock (enable) account

=item B<patch>

patch [OPTIONS] [ORIGFILE [PATCHFILE]]

	-p,--strip N		Strip N leading components from file names
	-i,--input DIFF		Read DIFF instead of stdin
	-R,--reverse		Reverse patch
	-N,--forward		Ignore already applied patches
	-E,--remove-empty-files	Remove output files if they become empty

=item B<pidof>

pidof [OPTIONS] [NAME]...

List PIDs of all processes with names that match NAMEs

	-s	Show only one PID
	-o PID	Omit given pid
		Use %PPID to omit pid of pidof's parent

=item B<ping>

ping [OPTIONS] HOST

Send ICMP ECHO_REQUEST packets to network hosts

	-4,-6		Force IP or IPv6 name resolution
	-c CNT		Send only CNT pings
	-s SIZE		Send SIZE data bytes in packets (default:56)
	-t TTL		Set TTL
	-I IFACE/IP	Use interface or IP address as source
	-W SEC		Seconds to wait for the first response (default:10)
			(after all -c CNT packets are sent)
	-w SEC		Seconds until ping exits (default:infinite)
			(can exit earlier with -c CNT)
	-q		Quiet, only displays output at start
			and when finished

=item B<pivot_root>

pivot_root NEW_ROOT PUT_OLD

Move the current root file system to PUT_OLD and make NEW_ROOT
the new root file system

=item B<poweroff>

poweroff [-d DELAY] [-n] [-f]

Halt and shut off power

	-d SEC	Delay interval
	-n	Do not sync
	-f	Force (don't go through init)

=item B<printenv>

printenv [VARIABLE]...

Print environment VARIABLEs.
If no VARIABLE specified, print all.

=item B<printf>

printf FORMAT [ARG]...

Format and print ARG(s) according to FORMAT (a-la C printf)

=item B<ps>

ps [-o COL1,COL2=HEADER]

Show list of processes

	-o COL1,COL2=HEADER	Select columns for display

=item B<pwd>

pwd 

Print the full filename of the current working directory

=item B<rdate>

rdate [-sp] HOST

Get and possibly set the system date and time from a remote HOST

	-s	Set the system date and time (default)
	-p	Print the date and time

=item B<readlink>

readlink [-fnv] FILE

Display the value of a symlink

	-f	Canonicalize by following all symlinks
	-n	Don't add newline
	-v	Verbose

=item B<readprofile>

readprofile [OPTIONS]

	-m mapfile	(Default: /boot/System.map)
	-p profile	(Default: /proc/profile)
	-M NUM		Set the profiling multiplier to NUM
	-i		Print only info about the sampling step
	-v		Verbose
	-a		Print all symbols, even if count is 0
	-b		Print individual histogram-bin counts
	-s		Print individual counters within functions
	-r		Reset all the counters (root only)
	-n		Disable byte order auto-detection

=item B<realpath>

realpath FILE...

Return the absolute pathnames of given FILE

=item B<reboot>

reboot [-d DELAY] [-n] [-f]

Reboot the system

	-d SEC	Delay interval
	-n	Do not sync
	-f	Force (don't go through init)

=item B<renice>

renice {{-n INCREMENT} | PRIORITY} [[-p | -g | -u] ID...]

Change scheduling priority for a running process

	-n	Adjust current nice value (smaller is faster)
	-p	Process id(s) (default)
	-g	Process group id(s)
	-u	Process user name(s) and/or id(s)

=item B<reset>

reset 

Reset the screen

=item B<resize>

resize 

Resize the screen

=item B<rm>

rm [-irf] FILE...

Remove (unlink) FILEs

	-i	Always prompt before removing
	-f	Never prompt
	-R,-r	Recurse

=item B<rmdir>

rmdir [OPTIONS] DIRECTORY...

Remove DIRECTORY if it is empty

	-p	Include parents

=item B<rmmod>

rmmod [-wfa] [MODULE]...

Unload kernel modules

	-w	Wait until the module is no longer used
	-f	Force unload
	-a	Remove all unused modules (recursively)

=item B<route>

route [{add|del|delete}]

Edit kernel routing tables

	-n	Don't resolve names
	-e	Display other/more information
	-A inet{6}	Select address family

=item B<run-parts>

run-parts [-t] [-a ARG] [-u MASK] DIRECTORY

Run a bunch of scripts in DIRECTORY

	-t	Print what would be run, but don't actually run anything
	-a ARG	Pass ARG as argument for every program
	-u MASK	Set the umask to MASK before running every program

=item B<runlevel>

runlevel [FILE]

Find the current and previous system runlevel

If no utmp FILE exists or if no runlevel record can be found,
print "unknown"

=item B<sed>

sed [-inr] [-f FILE]... [-e CMD]... [FILE]...
or: sed [-inr] CMD [FILE]...

	-e CMD	Add CMD to sed commands to be executed
	-f FILE	Add FILE contents to sed commands to be executed
	-i	Edit files in-place (else sends result to stdout)
	-n	Suppress automatic printing of pattern space
	-r	Use extended regex syntax

If no -e or -f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).

=item B<seq>

seq [-w] [-s SEP] [FIRST [INC]] LAST

Print numbers from FIRST to LAST, in steps of INC.
FIRST, INC default to 1.

	-w	Pad to last with leading zeros
	-s SEP	String separator

=item B<setarch>

setarch personality PROG ARGS

Personality may be:

	linux32		Set 32bit uname emulation
	linux64		Set 64bit uname emulation

=item B<setconsole>

setconsole [-r] [DEVICE]

Redirect system console output to DEVICE (default: /dev/tty)

	-r	Reset output to /dev/console

=item B<setkeycodes>

setkeycodes SCANCODE KEYCODE...

Set entries into the kernel's scancode-to-keycode map,
allowing unusual keyboards to generate usable keycodes.

SCANCODE may be either xx or e0xx (hexadecimal),
and KEYCODE is given in decimal.

=item B<setlogcons>

setlogcons N

Redirect the kernel output to console N (0 for current)

=item B<setserial>

setserial [-gabGvzV] DEVICE [PARAMETER [ARG]]...

Request or set Linux serial port information

	-g	Interpret parameters as list of devices for reporting
	-a	Print all available information
	-b	Print summary information
	-G	Print in form which can be fed back
		to setserial as command line parameters
	-z	Zero out serial flags before setting
	-v	Verbose

Parameters: (* = takes an argument, ^ = can be turned off by preceding ^)
	*port, *irq, *divisor, *uart, *baund_base, *close_delay, *closing_wait,
	^fourport, ^auto_irq, ^skip_test, ^sak, ^session_lockout, ^pgrp_lockout,
	^callout_nohup, ^split_termios, ^hup_notify, ^low_latency, autoconfig,
	spd_normal, spd_hi, spd_vhi, spd_shi, spd_warp, spd_cust

UART types:

	unknown, 8250, 16450, 16550, 16550A, Cirrus, 16650, 16650V2, 16750,
	16950, 16954, 16654, 16850, RSA, NS16550A, XSCALE, RM9000, OCTEON, AR7,
	U6_16550A

=item B<setsid>

setsid PROG ARGS

Run PROG in a new session. PROG will have no controlling terminal
and will not be affected by keyboard signals (Ctrl-C etc).
See setsid(2) for details.

=item B<sh>

sh [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS]]

Unix shell interpreter

=item B<sha1sum>

sha1sum [-c[sw]] [FILE]...

Print or check SHA1 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha256sum>

sha256sum [-c[sw]] [FILE]...

Print or check SHA256 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha512sum>

sha512sum [-c[sw]] [FILE]...

Print or check SHA512 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sleep>

sleep N

Pause for N seconds

=item B<sort>

sort [-nrugMcszbdfimSTokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...

Sort lines of text

	-b	Ignore leading blanks
	-c	Check whether input is sorted
	-d	Dictionary order (blank or alphanumeric only)
	-f	Ignore case
	-g	General numerical sort
	-i	Ignore unprintable characters
	-k	Sort key
	-M	Sort month
	-n	Sort numbers
	-o	Output to file
	-k	Sort by key
	-t CHAR	Key separator
	-r	Reverse sort order
	-s	Stable (don't sort ties alphabetically)
	-u	Suppress duplicate lines
	-z	Lines are terminated by NUL, not newline
	-mST	Ignored for GNU compatibility

=item B<start-stop-daemon>

start-stop-daemon [OPTIONS] [-S|-K] ... [-- ARGS...]

Search for matching processes, and then
-K: stop all matching processes.
-S: start a process unless a matching process is found.

Process matching:

	-u,--user USERNAME|UID	Match only this user's processes
	-n,--name NAME		Match processes with NAME
				in comm field in /proc/PID/stat
	-x,--exec EXECUTABLE	Match processes with this command
				in /proc/PID/{exe,cmdline}
	-p,--pidfile FILE	Match a process with PID from the file
	All specified conditions must match
-S only:
	-x,--exec EXECUTABLE	Program to run
	-a,--startas NAME	Zeroth argument
	-b,--background		Background
	-N,--nicelevel N	Change nice level
	-c,--chuid USER[:[GRP]]	Change to user/group
	-m,--make-pidfile	Write PID to the pidfile specified by -p
-K only:
	-s,--signal SIG		Signal to send
	-t,--test		Match only, exit with 0 if a process is found
Other:

	-o,--oknodo		Exit with status 0 if nothing is done
	-v,--verbose		Verbose
	-q,--quiet		Quiet

=item B<strings>

strings [-afo] [-n LEN] [FILE]...

Display printable strings in a binary file

	-a	Scan whole file (default)
	-f	Precede strings with filenames
	-n LEN	At least LEN characters form a string (default 4)
	-o	Precede strings with decimal offsets

=item B<stty>

stty [-a|g] [-F DEVICE] [SETTING]...

Without arguments, prints baud rate, line discipline,
and deviations from stty sane

	-F DEVICE	Open device instead of stdin
	-a		Print all current settings in human-readable form
	-g		Print in stty-readable form
	[SETTING]	See manpage

=item B<su>

su [OPTIONS] [-] [USER]

Run shell under USER (by default, root)

	-,-l	Clear environment, run shell as login shell
	-p,-m	Do not set new $HOME, $SHELL, $USER, $LOGNAME
	-c CMD	Command to pass to 'sh -c'
	-s SH	Shell to use instead of user's default

=item B<sulogin>

sulogin [-t N] [TTY]

Single user login

	-t N	Timeout

=item B<swapoff>

swapoff [-a] [DEVICE]

Stop swapping on DEVICE

	-a	Stop swapping on all swap devices

=item B<swapon>

swapon [-a] [DEVICE]

Start swapping on DEVICE

	-a	Start swapping on all swap devices

=item B<switch_root>

switch_root [-c /dev/console] NEW_ROOT NEW_INIT [ARGS]

Free initramfs and switch to another root fs:

chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.

	-c DEV	Reopen stdio to DEV after switch

=item B<sync>

sync 

Write all buffered blocks to disk

=item B<sysctl>

sysctl [OPTIONS] [VALUE]...

Configure kernel parameters at runtime

	-n	Don't print key names
	-e	Don't warn about unknown keys
	-w	Change sysctl setting
	-p FILE	Load sysctl settings from FILE (default /etc/sysctl.conf)
	-a	Display all values
	-A	Display all values in table form

=item B<syslogd>

syslogd [OPTIONS]

System logging utility
(this version of syslogd ignores /etc/syslog.conf)

	-n		Run in foreground
	-O FILE		Log to FILE (default:/var/log/messages)
	-l N		Log only messages more urgent than prio N (1-8)
	-S		Smaller output
	-s SIZE		Max size (KB) before rotation (default:200KB, 0=off)
	-b N		N rotated logs to keep (default:1, max=99, 0=purge)
	-R HOST[:PORT]	Log to IP or hostname on PORT (default PORT=514/UDP)
	-L		Log locally and via network (default is network only if -R)

=item B<tail>

tail [OPTIONS] [FILE]...

Print last 10 lines of each FILE (or stdin) to stdout.
With more than one FILE, precede each with a filename header.

	-f		Print data as file grows
	-s SECONDS	Wait SECONDS between reads with -f
	-n N[kbm]	Print last N lines
	-c N[kbm]	Print last N bytes
	-q		Never print headers
	-v		Always print headers

N may be suffixed by k (x1024), b (x512), or m (x1024^2).
If N starts with a '+', output begins with the Nth item from the start
of each file, not from the end.

=item B<tar>

tar -[cxthvO] [-X FILE] [-T FILE] [-f TARFILE] [-C DIR] [FILE]...

Create, extract, or list files from a tar file

Operation:

	c	Create
	x	Extract
	t	List
	f	Name of TARFILE ('-' for stdin/out)
	C	Change to DIR before operation
	v	Verbose
	O	Extract to stdout
	h	Follow symlinks
	exclude	File to exclude
	X	File with names to exclude
	T	File with names to include

=item B<tee>

tee [-ai] [FILE]...

Copy stdin to each FILE, and also to stdout

	-a	Append to the given FILEs, don't overwrite
	-i	Ignore interrupt signals (SIGINT)

=item B<telnet>

telnet [-a] [-l USER] HOST [PORT]

Connect to telnet server

	-a	Automatic login with $USER variable
	-l USER	Automatic login as USER

=item B<test>

test EXPRESSION ]

Check file types, compare values etc. Return a 0/1 exit code
depending on logical value of EXPRESSION

=item B<tftp>

tftp [OPTIONS] HOST [PORT]

Transfer a file from/to tftp server

	-l FILE	Local FILE
	-r FILE	Remote FILE
	-g	Get file
	-p	Put file
	-b SIZE	Transfer blocks of SIZE octets

=item B<time>

time [-v] PROG ARGS

Run PROG, display resource usage when it exits

	-v	Verbose

=item B<top>

top [-b] [-nCOUNT] [-dSECONDS]

Provide a view of process activity in real time.
Read the status of all processes from /proc each SECONDS
and display a screenful of them.
Keys:

	N/M/P/T: sort by pid/mem/cpu/time
	R: reverse sort
	Q,^C: exit

Options:

	-b	Batch mode
	-n N	Exit after N iterations
	-d N	Delay between updates

=item B<touch>

touch [-c] [-d DATE] [-t DATE] [-r FILE] FILE...

Update the last-modified date on the given FILE[s]

	-c	Don't create files
	-d DT	Date/time to use
	-t DT	Date/time to use
	-r FILE	Use FILE's date/time

=item B<tr>

tr [-cds] STRING1 [STRING2]

Translate, squeeze, or delete characters from stdin, writing to stdout

	-c	Take complement of STRING1
	-d	Delete input characters coded STRING1
	-s	Squeeze multiple output characters of STRING2 into one character

=item B<traceroute>

traceroute [-FIldnrv] [-f 1ST_TTL] [-m MAXTTL] [-p PORT] [-q PROBES]
	[-s SRC_IP] [-t TOS] [-w WAIT_SEC] [-g GATEWAY] [-i IFACE]
	[-z PAUSE_MSEC] HOST [BYTES]

Trace the route to HOST

	-F	Set the don't fragment bit
	-I	Use ICMP ECHO instead of UDP datagrams
	-l	Display the TTL value of the returned packet
	-d	Set SO_DEBUG options to socket
	-n	Print numeric addresses
	-r	Bypass routing tables, send directly to HOST
	-v	Verbose
	-m	Max time-to-live (max number of hops)
	-p	Base UDP port number used in probes
		(default 33434)
	-q	Number of probes per TTL (default 3)
	-s	IP address to use as the source address
	-t	Type-of-service in probe packets (default 0)
	-w	Time in seconds to wait for a response (default 3)
	-g	Loose source route gateway (8 max)

=item B<true>

true 

Return an exit code of TRUE (0)

=item B<tty>

tty 

Print file name of stdin's terminal

	-s	Print nothing, only return exit status

=item B<udhcpc>

udhcpc [-fbnqoCRB] [-i IFACE] [-r IP] [-s PROG] [-p PIDFILE]
	[-V VENDOR] [-x OPT:VAL]... [-O OPT]...

	-i,--interface IFACE	Interface to use (default eth0)
	-p,--pidfile FILE	Create pidfile
	-s,--script PROG	Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
	-B,--broadcast		Request broadcast replies
	-t,--retries N		Send up to N discover packets
	-T,--timeout N		Pause between packets (default 3 seconds)
	-A,--tryagain N		Wait N seconds after failure (default 20)
	-f,--foreground		Run in foreground
	-b,--background		Background if lease is not obtained
	-n,--now		Exit if lease is not obtained
	-q,--quit		Exit after obtaining lease
	-R,--release		Release IP on exit
	-S,--syslog		Log to syslog too
	-a,--arping		Use arping to validate offered address
	-O,--request-option OPT	Request option OPT from server (cumulative)
	-o,--no-default-options	Don't request any options (unless -O is given)
	-r,--request IP		Request this IP address
	-x OPT:VAL		Include option OPT in sent packets (cumulative)
				Examples of string, numeric, and hex byte opts:
				-x hostname:bbox - option 12
				-x lease:3600 - option 51 (lease time)
				-x 0x3d:0100BEEFC0FFEE - option 61 (client id)
	-F,--fqdn NAME		Ask server to update DNS mapping for NAME
	-V,--vendorclass VENDOR	Vendor identifier (default 'udhcp VERSION')
	-C,--clientid-none	Don't send MAC as client identifier
Signals:

	USR1	Renew lease
	USR2	Release lease

=item B<umount>

umount [OPTIONS] FILESYSTEM|DIRECTORY

Unmount file systems

	-a	Unmount all file systems
	-r	Try to remount devices as read-only if mount is busy
	-l	Lazy umount (detach filesystem)
	-f	Force umount (i.e., unreachable NFS server)
	-D	Don't free loop device even if it has been used

=item B<uname>

uname [-amnrspv]

Print system information

	-a	Print all
	-m	The machine (hardware) type
	-n	Hostname
	-r	OS release
	-s	OS name (default)
	-p	Processor type
	-v	OS version

=item B<uniq>

uniq [-cdu][-f,s,w N] [INPUT [OUTPUT]]

Discard duplicate lines

	-c	Prefix lines by the number of occurrences
	-d	Only print duplicate lines
	-u	Only print unique lines
	-f N	Skip first N fields
	-s N	Skip first N chars (after any skipped fields)
	-w N	Compare N characters in line

=item B<unix2dos>

unix2dos [-ud] [FILE]

Convert FILE in-place from Unix to DOS format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<unlzma>

unlzma [-cf] [FILE]...

Decompress FILE (or stdin)

	-c	Write to stdout
	-f	Force

=item B<unxz>

unxz [-cf] [FILE]...

Decompress FILE (or stdin)

	-c	Write to stdout
	-f	Force

=item B<unzip>

unzip [-opts[modifiers]] FILE[.zip] [LIST] [-x XLIST] [-d DIR]

Extract files from ZIP archives

	-l	List archive contents (with -q for short form)
	-n	Never overwrite files (default)
	-o	Overwrite
	-p	Send output to stdout
	-q	Quiet
	-x XLST	Exclude these files
	-d DIR	Extract files into DIR

=item B<uptime>

uptime 

Display the time since the last boot

=item B<usleep>

usleep N

Pause for N microseconds

=item B<uudecode>

uudecode [-o OUTFILE] [INFILE]

Uudecode a file
Finds OUTFILE in uuencoded source unless -o is given

=item B<uuencode>

uuencode [-m] [FILE] STORED_FILENAME

Uuencode FILE (or stdin) to stdout

	-m	Use base64 encoding per RFC1521

=item B<vconfig>

vconfig COMMAND [OPTIONS]

Create and remove virtual ethernet devices

	add		IFACE VLAN_ID
	rem		VLAN_NAME
	set_flag	IFACE 0|1 VLAN_QOS
	set_egress_map	VLAN_NAME SKB_PRIO VLAN_QOS
	set_ingress_map	VLAN_NAME SKB_PRIO VLAN_QOS
	set_name_type	NAME_TYPE

=item B<vi>

vi [OPTIONS] [FILE]...

Edit FILE

	-c	Initial command to run ($EXINIT also available)
	-R	Read-only
	-H	Short help regarding available features

=item B<vlock>

vlock [-a]

Lock a virtual terminal. A password is required to unlock.

	-a	Lock all VTs

=item B<watch>

watch [-n SEC] [-t] PROG ARGS

Run PROG periodically

	-n	Loop period in seconds (default 2)
	-t	Don't print header

=item B<watchdog>

watchdog [-t N[ms]] [-T N[ms]] [-F] DEV

Periodically write to watchdog device DEV

	-T N	Reboot after N seconds if not reset (default 60)
	-t N	Reset every N seconds (default 30)
	-F	Run in foreground

Use 500ms to specify period in milliseconds

=item B<wc>

wc [-clwL] [FILE]...

Count lines, words, and bytes for each FILE (or stdin)

	-c	Count bytes
	-l	Count newlines
	-w	Count words
	-L	Print longest line length

=item B<wget>

wget [-c|--continue] [-s|--spider] [-q|--quiet] [-O|--output-document FILE]
	[--header 'header: value'] [-Y|--proxy on/off] [-P DIR]
	[--no-check-certificate] [-U|--user-agent AGENT] [-T SEC] URL...

Retrieve files via HTTP or FTP

	-s	Spider mode - only check file existence
	-c	Continue retrieval of aborted transfer
	-q	Quiet
	-P DIR	Save to DIR (default .)
	-T SEC	Network read timeout is SEC seconds
	-O FILE	Save to FILE ('-' for stdout)
	-U STR	Use STR for User-Agent header
	-Y	Use proxy ('on' or 'off')

=item B<which>

which [COMMAND]...

Locate a COMMAND

=item B<who>

who [-a]

Show who is logged on

	-a	Show all
	-H	Print column headers

=item B<whoami>

whoami 

Print the user name associated with the current effective user id

=item B<xargs>

xargs [OPTIONS] [PROG ARGS]

Run PROG on every item given by stdin

	-r	Don't run command if input is empty
	-0	Input is separated by NUL characters
	-t	Print the command on stderr before execution
	-e[STR]	STR stops input processing
	-n N	Pass no more than N args to PROG
	-s N	Pass command line of no more than N bytes
	-x	Exit if size is exceeded

=item B<xz>

xz -d [-cf] [FILE]...

Decompress FILE (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force

=item B<xzcat>

xzcat FILE

Decompress to stdout

=item B<yes>

yes [STRING]

Repeatedly output a line with STRING, or 'y'

=item B<zcat>

zcat FILE

Decompress to stdout

=back

=head1 LIBC NSS

GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of NSS.  Some applets however, such as login and su, will use libc functions
that require NSS.

If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using NSS.  This may allow you to run your system without the need for
installing any of the NSS configuration files and libraries.

When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc NSS stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).

Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any NSS support files or libraries.

=head1 MAINTAINER

Denis Vlasenko <vda.linux@googlemail.com>

=head1 AUTHORS

The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.


=for html <br>

Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts

=for html <br>

Erik Andersen <andersen@codepoet.org>

    Tons of new stuff, major rewrite of most of the
    core apps, tons of new apps as noted in header files.
    Lots of tedious effort writing these boring docs that
    nobody is going to actually read.

=for html <br>

Laurence Anderson <l.d.anderson@warwick.ac.uk>

    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

=for html <br>

Jeff Angielski <jeff@theptrgroup.com>

    ftpput, ftpget

=for html <br>

Edward Betts <edward@debian.org>

    expr, hostid, logname, whoami

=for html <br>

John Beppu <beppu@codepoet.org>

    du, nslookup, sort

=for html <br>

Brian Candler <B.Candler@pobox.com>

    tiny-ls(ls)

=for html <br>

Randolph Chung <tausq@debian.org>

    fbset, ping, hostname

=for html <br>

Dave Cinege <dcinege@psychosis.com>

    more(v2), makedevs, dutmp, modularization, auto links file,
    various fixes, Linux Router Project maintenance

=for html <br>

Jordan Crouse <jordan@cosmicpenguin.net>

    ipcalc

=for html <br>

Magnus Damm <damm@opensource.se>

    tftp client insmod powerpc support

=for html <br>

Larry Doolittle <ldoolitt@recycle.lbl.gov>

    pristine source directory compilation, lots of patches and fixes.

=for html <br>

Glenn Engel <glenne@engel.org>

    httpd

=for html <br>

Gennady Feldman <gfeldman@gena01.com>

    Sysklogd (single threaded syslogd, IPC Circular buffer support,
    logread), various fixes.

=for html <br>

Karl M. Hegbloom <karlheg@debian.org>

    cp_mv.c, the test suite, various fixes to utility.c, &c.

=for html <br>

Daniel Jacobowitz <dan@debian.org>

    mktemp.c

=for html <br>

Matt Kraai <kraai@alumni.cmu.edu>

    documentation, bugfixes, test suite

=for html <br>

Stephan Linz <linz@li-pro.net>

    ipcalc, Red Hat equivalence

=for html <br>

John Lombardo <john@deltanet.com>

    tr

=for html <br>

Glenn McGrath <bug1@iinet.net.au>

    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
    nameif, sed, patch, fold, install, uudecode.
    Various bugfixes, review and apply numerous patches.

=for html <br>

Manuel Novoa III <mjn3@codepoet.org>

    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
    get_last_path_component, simplify_path, and a number trivial libbb routines

    also bug fixes, partial rewrites, and size optimizations in
    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
    interface, dutmp, ifconfig, route

=for html <br>

Vladimir Oleynik <dzo@simtreas.ru>

    cmdedit; xargs(current), httpd(current);
    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
    locale, various fixes
    and irreconcilable critic of everything not perfect.

=for html <br>

Bruce Perens <bruce@pixar.com>

    Original author of BusyBox in 1995, 1996. Some of his code can
    still be found hiding here and there...

=for html <br>

Tim Riker <Tim@Rikers.org>

    bug fixes, member of fan club

=for html <br>

Kent Robotti <robotti@metconnect.com>

    reset, tons and tons of bug reports and patches.

=for html <br>

Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

    wget - Contributed by permission of Covad Communications

=for html <br>

Pavel Roskin <proski@gnu.org>

    Lots of bugs fixes and patches.

=for html <br>

Gyepi Sam <gyepi@praxis-sw.com>

    Remote logging feature for syslogd

=for html <br>

Linus Torvalds <torvalds@transmeta.com>

    mkswap, fsck.minix, mkfs.minix

=for html <br>

Mark Whitley <markw@codepoet.org>

    grep, sed, cut, xargs(previous),
    style-guide, new-applet-HOWTO, bug fixes, etc.

=for html <br>

Charles P. Wright <cpwright@villagenet.com>

    gzip, mini-netcat(nc)

=for html <br>

Enrique Zanardi <ezanardi@ull.es>

    tarcat (since removed), loadkmap, various fixes, Debian maintenance

=for html <br>

Tito Ragusa <farmatito@tiscali.it>

    devfsd and size optimizations in strings, openvt and deallocvt.

=for html <br>

Paul Fox <pgf@foxharp.boston.ma.us>

    vi editing mode for ash, various other patches/fixes

=for html <br>

Roberto A. Foglietta <me@roberto.foglietta.name>

    port: dnsd

=for html <br>

Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

    misc

=for html <br>

Mike Frysinger <vapier@gentoo.org>

    initial e2fsprogs, printenv, setarch, sum, misc

=for html <br>

Jie Zhang <jie.zhang@analog.com>

    fixed two bugs in msh and hush (exitcode of killed processes)

=cut
